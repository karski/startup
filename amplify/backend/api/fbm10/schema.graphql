enum LocationType {
  LikeIt
  HateIt
  Improvement
  FixIt
  Suggestion
  Favorite
}

enum UserType {
  admin
  manager
  user
}

enum VoteType {
  up
  down
  flag
}

type Point {
  lat: Float!
  lng: Float!
}

type Bounds {
  ne_lat: Float
  ne_lng: Float
  sw_lat: Float
  sw_lng: Float
}

# type S3Object {
#   bucket: String
#   key: String
#   region: String
#   url: AWSURL
#   uploadUrl: AWSURL
# }

type Area @model @searchable {
  id: ID!
  name: String!
  contact: String!
  description: String!
  bounds: Bounds
  locations: [Location] @connection(name: "AreaLocations")
  users: [User] @connection(name: "AreaUsers")
  userCanCreateLocations: Boolean
  geoJson: String
}

type Location @model @searchable {
  id: ID!
  area: Area @connection(name: "AreaLocations")
  name: String!
  description: String!
  date: String!
  user: User @connection(name: "UserLocations")
  position: Point
  address: String
  type: LocationType
  comments: [Comment] @connection(name: "LocationComments")
  votes: [Vote] @connection(name: "LocationVotes")
  flagged: Boolean
  response: String
  resolved: Boolean
  locationPicture: String
}

type User @model @searchable {
  id: ID!
  area: Area @connection(name: "AreaUsers")
  userType: UserType
  name: String!
  uid: String!
  locations: [Location] @connection(name: "UserLocations")
  comments: [Comment] @connection(name: "UserComments")
  votes: [Vote] @connection(name: "UserVotes")
  profilePicture: String
}

type Comment @model {
  id: ID!
  content: String!
  time: String!
  location: Location @connection(name: "LocationComments")
  user: User! @connection(name: "UserComments")
  commentPicture: String
}

type Vote @model {
  id: ID!
  voteType: VoteType!
  user: User! @connection(name: "UserVotes")
  location: Location! @connection(name: "LocationVotes")
}
